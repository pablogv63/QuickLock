package com.pablogv63.quicklock.domain.use_case

import com.pablogv63.quicklock.data.data_source.AppDatabase
import com.pablogv63.quicklock.domain.model.CredentialCategoryPair
import com.pablogv63.quicklock.domain.model.CredentialWithCategoryList
import com.pablogv63.quicklock.domain.repository.CategoryRepository
import com.pablogv63.quicklock.domain.repository.CredentialCategoryPairRepository
import com.pablogv63.quicklock.domain.repository.CredentialRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * Deletes content from all tables and repopulates from the list
 * (autogenerated ID is not reset)
 */
class RepopulateDatabase(
    private val credentialRepository: CredentialRepository,
    private val categoryRepository: CategoryRepository,
    private val credentialCategoryPairRepository: CredentialCategoryPairRepository,
    private val db: AppDatabase
) {
    suspend operator fun invoke(credentialsWithCategories: List<CredentialWithCategoryList>){

        withContext(Dispatchers.IO){
            // Delete all tables
            db.clearAllTables()

            // Insert all
            credentialsWithCategories.map { credentialWithCategoryList ->
                // Insert credential
                val credential = credentialWithCategoryList.credential
                val newCredentialId = credentialRepository.insertCredential(credential)
                // Insert categories
                val categoryList = credentialWithCategoryList.categories
                categoryRepository.insertAll(categoryList)
                // Insert credential category pairs
                categoryList.map { category ->
                    val pair = CredentialCategoryPair(
                        credentialId = newCredentialId.toInt(),
                        categoryId = category.categoryId
                    )
                    credentialCategoryPairRepository.insertCredentialCategoryPair(pair)
                }
            }
        }

    }
}